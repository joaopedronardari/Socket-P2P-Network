NewIO - chamadada n?o bloqueante TCP/UDP (Thread SO)



EP 1 de Redes

Chat H?brido

Grupos de 2 a 4 pessoas

Criar, em Java e usando somente TCP, um sistema distribu?do de chat com caracter?sticas h?bridas de cliente servidor e peer-to-peer, com as seguintes atribui??es para clientes/peers e para o servidor.

Servidor:

- Mant?m uma lista de clientes e uma lista de contatos de cada cliente - os clientes n?o devem poder conversar com todos os outros clientes, mas s? com seus contatos. A rela??o de contato deve ser rec?porca. (Essas listas podem ser criadas manualmente e a priori para o EP, n?o h? necessidade de implementar interfaces e mecanismos para busca, inclus?o e exclus?o de clientes ou contatos. Cuidado ao gerar as listas manualmente para manter os contatos rec?procos. Essas listas n?o devem ficar hard-coded, mas podem estar em um arquivo de texto simples, ou em um banco de dados, conforme o grupo preferir.)

- Recebe pedidos de conex?o ou desconex?o do cliente. O servidor notifica todos os contatos de um cliente quando ele se conecta e fornece seu IP atual a eles, e notifica quando o cliente se desconecta. (Como a rela??o de contato ? rec?proca, basta notificar todos os contatos do cliente que conectou ou desconectou, n?o ? preciso buscar em todas as listas de contatos dos outros clientes.) O servidor envia para o cliente que se conectou uma lista com os IPs de todos os seus contatos que est?o online.

- Recebe periodicamente (o grupo deve definir o per?odo que achar adequado) mensagens de keep alive. Ap?s N mensagens n?o recebidas (com N tamb?m definido pelo grupo) o servidor deve assumir que o cliente n?o est? mais conectado e notificar seus contatos disso.

Clientes:

- Conectam com o servidor (em um IP vari?vel entrado pelo usu?rio - a porta pode ser fixa) para receber os IPs de seus contatos que estiverem online, para que eles sejam notificados (pelo servidor) que o cliente ficou online e obterem seu IP atual.

- Mostram quais contatos do cliente est?o online e quais est?o offline.

- Aceitam conex?es de outros clientes para trocar mensagens (essas conex?es podem ser persistentes depois de abertas, ou n?o - o grupo deve decidir).

- Permitem que o usu?rio selecione um contato para enviar mensagens.

- Permitem que o usu?rio entre a mensagem e a envie para o contato selecionado.

- Mostram as mensagens recebidas dos contatos (ou todas de uma vez identificando o contato, ou em contextos separados, um para cada contato).

- Enviam periodicamente mensagens de keep alive para o servidor.

- Permitem que o usu?rio desconecte-se do servidor.

Os grupos dever?o entregar os execut?veis (.jar) compilados do servidor e do cliente. Deve ser poss?vel rodar servidor e clientes tanto na mesma m?quina (usando o home: 127.0.0.1) como em m?quinas diferentes na mesma subrede (ou seja, ligadas ao mesmo roteador com a mesma NAT, n?o ? preciso preocupar-se com o problema de travessia de NAT. A aplica??o deve ser testada nesses dois cen?rios.

Devem entregar tamb?m as fontes comentadas do c?digo (se usaram algum projeto, por exemplo do Eclipse ou do NetBeans, entreguem tamb?m todos os arquivos de projeto, preferencialmente sem usar caminhos absolutos de diret?rios no projeto). Os coment?rios devem ser suficientes para o entendimento do c?digo e devem citar quaisquer fontes externas consultadas para a elabora??o de trechos espec?ficos do c?digo.

Por fim, devem entregar um relat?rio que inclua:
- A especifica??o completa do protocolo desenvolvido e usado no EP.
- Descri??o e justificativa das decis?es de projeto (por exemplo sobre o keep alive e a persist?ncia das conex?es).
- Descri??o da aquitetura e do c?digo, para facilitar a leitura do c?digo.
- Descri??o de como iniciar o servidor e usar o aplicativo.
- Relato dos testes realizados pelo grupo e de seus resultados.